"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
function isObject(item) {
    return (item &&
        typeof item === 'object' &&
        !Array.isArray(item) &&
        !(item instanceof RegExp) &&
        !(item instanceof Date));
}
function isMergableArray(item) {
    return Array.isArray(item) && !item.some(function (el) { return typeof el !== 'object'; });
}
function deepmerge(base, overwrite) {
    var output = __assign({}, base);
    if (isObject(base) && isObject(overwrite)) {
        Object.keys(overwrite).forEach(function (key) {
            var _a, _b;
            if (isObject(overwrite[key])) {
                if (!(key in base)) {
                    Object.assign(output, (_a = {}, _a[key] = overwrite[key], _a));
                }
                else if (base[key] && isObject(base[key])) {
                    output[key] = deepmerge(base[key], overwrite[key]);
                }
                else {
                    output[key] = overwrite[key];
                }
            }
            else if (isMergableArray(overwrite[key])) {
                output[key] = (Array.isArray(base[key]) ? __spreadArray([], base[key], true) : []).concat(overwrite[key]);
            }
            else {
                Object.assign(output, (_b = {}, _b[key] = overwrite[key], _b));
            }
        });
    }
    return output;
}
exports.default = deepmerge;
//# sourceMappingURL=deepmerge.js.map