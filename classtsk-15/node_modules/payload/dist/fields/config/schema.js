"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    array: function() {
        return array;
    },
    baseAdminComponentFields: function() {
        return baseAdminComponentFields;
    },
    baseAdminFields: function() {
        return baseAdminFields;
    },
    baseField: function() {
        return baseField;
    },
    blocks: function() {
        return blocks;
    },
    checkbox: function() {
        return checkbox;
    },
    code: function() {
        return code;
    },
    collapsible: function() {
        return collapsible;
    },
    date: function() {
        return date;
    },
    default: function() {
        return _default;
    },
    email: function() {
        return email;
    },
    group: function() {
        return group;
    },
    idField: function() {
        return idField;
    },
    json: function() {
        return json;
    },
    number: function() {
        return number;
    },
    point: function() {
        return point;
    },
    radio: function() {
        return radio;
    },
    relationship: function() {
        return relationship;
    },
    richText: function() {
        return richText;
    },
    row: function() {
        return row;
    },
    select: function() {
        return select;
    },
    tabs: function() {
        return tabs;
    },
    text: function() {
        return text;
    },
    textarea: function() {
        return textarea;
    },
    ui: function() {
        return ui;
    },
    upload: function() {
        return upload;
    }
});
const _joi = /*#__PURE__*/ _interop_require_default(require("joi"));
const _componentSchema = require("../../config/shared/componentSchema");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseAdminComponentFields = _joi.default.object().keys({
    Cell: _componentSchema.componentSchema,
    Field: _componentSchema.componentSchema,
    Filter: _componentSchema.componentSchema
}).default({});
const baseAdminFields = _joi.default.object().keys({
    className: _joi.default.string(),
    components: baseAdminComponentFields,
    condition: _joi.default.func(),
    description: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
        _joi.default.string()
    ]), _componentSchema.componentSchema),
    disableBulkEdit: _joi.default.boolean().default(false),
    disabled: _joi.default.boolean().default(false),
    hidden: _joi.default.boolean().default(false),
    initCollapsed: _joi.default.boolean().default(false),
    position: _joi.default.string().valid('sidebar'),
    readOnly: _joi.default.boolean().default(false),
    style: _joi.default.object().unknown(),
    width: _joi.default.string()
});
const baseField = _joi.default.object().keys({
    access: _joi.default.object().keys({
        create: _joi.default.func(),
        read: _joi.default.func(),
        update: _joi.default.func()
    }),
    admin: baseAdminFields.default(),
    custom: _joi.default.object().pattern(_joi.default.string(), _joi.default.any()),
    hidden: _joi.default.boolean().default(false),
    hooks: _joi.default.object().keys({
        afterChange: _joi.default.array().items(_joi.default.func()).default([]),
        afterRead: _joi.default.array().items(_joi.default.func()).default([]),
        beforeChange: _joi.default.array().items(_joi.default.func()).default([]),
        beforeValidate: _joi.default.array().items(_joi.default.func()).default([])
    }).default(),
    index: _joi.default.boolean().default(false),
    label: _joi.default.alternatives().try(_joi.default.object().pattern(_joi.default.string(), [
        _joi.default.string()
    ]), _joi.default.string(), _joi.default.valid(false)),
    localized: _joi.default.boolean().default(false),
    required: _joi.default.boolean().default(false),
    saveToJWT: _joi.default.alternatives().try(_joi.default.boolean(), _joi.default.string()).default(false),
    unique: _joi.default.boolean().default(false),
    validate: _joi.default.func()
}).default();
const idField = baseField.keys({
    name: _joi.default.string().valid('id'),
    type: _joi.default.string().valid('text', 'number'),
    localized: _joi.default.invalid(true),
    required: _joi.default.not(false, 0).default(true)
});
const text = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('text').required(),
    admin: baseAdminFields.keys({
        autoComplete: _joi.default.string(),
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema,
            afterInput: _joi.default.array().items(_componentSchema.componentSchema),
            beforeInput: _joi.default.array().items(_componentSchema.componentSchema)
        }),
        placeholder: _joi.default.alternatives().try(_joi.default.object().pattern(_joi.default.string(), [
            _joi.default.string()
        ]), _joi.default.string()),
        rtl: _joi.default.boolean()
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()),
    hasMany: _joi.default.boolean().default(false),
    maxLength: _joi.default.number(),
    maxRows: _joi.default.number().when('hasMany', {
        is: _joi.default.not(true),
        then: _joi.default.forbidden()
    }),
    minLength: _joi.default.number(),
    minRows: _joi.default.number().when('hasMany', {
        is: _joi.default.not(true),
        then: _joi.default.forbidden()
    })
});
const number = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('number').required(),
    admin: baseAdminFields.keys({
        autoComplete: _joi.default.string(),
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema,
            afterInput: _joi.default.array().items(_componentSchema.componentSchema).when('hasMany', {
                not: true,
                otherwise: _joi.default.forbidden()
            }),
            beforeInput: _joi.default.array().items(_componentSchema.componentSchema).when('hasMany', {
                not: true,
                otherwise: _joi.default.forbidden()
            })
        }),
        placeholder: _joi.default.string(),
        step: _joi.default.number()
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.number(), _joi.default.func(), _joi.default.array().when('hasMany', {
        not: true,
        then: _joi.default.forbidden()
    })),
    hasMany: _joi.default.boolean().default(false),
    max: _joi.default.number(),
    maxRows: _joi.default.number().when('hasMany', {
        is: _joi.default.not(true),
        then: _joi.default.forbidden()
    }),
    min: _joi.default.number(),
    minRows: _joi.default.number().when('hasMany', {
        is: _joi.default.not(true),
        then: _joi.default.forbidden()
    })
});
const textarea = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('textarea').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema,
            afterInput: _joi.default.array().items(_componentSchema.componentSchema),
            beforeInput: _joi.default.array().items(_componentSchema.componentSchema)
        }),
        placeholder: _joi.default.string(),
        rows: _joi.default.number(),
        rtl: _joi.default.boolean()
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()),
    maxLength: _joi.default.number(),
    minLength: _joi.default.number()
});
const email = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('email').required(),
    admin: baseAdminFields.keys({
        autoComplete: _joi.default.string(),
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema,
            afterInput: _joi.default.array().items(_componentSchema.componentSchema),
            beforeInput: _joi.default.array().items(_componentSchema.componentSchema)
        }),
        placeholder: _joi.default.string()
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()),
    maxLength: _joi.default.number(),
    minLength: _joi.default.number()
});
const code = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('code').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema
        }),
        editorOptions: _joi.default.object().unknown(),
        language: _joi.default.string()
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func())
});
const json = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('json').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema
        }),
        editorOptions: _joi.default.object().unknown()
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.array(), _joi.default.object()),
    jsonSchema: _joi.default.object().unknown()
});
const select = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('select').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema
        }),
        isClearable: _joi.default.boolean().default(false),
        isSortable: _joi.default.boolean().default(false)
    }),
    dbName: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()),
    defaultValue: _joi.default.alternatives().try(_joi.default.string().allow(''), _joi.default.array().items(_joi.default.string().allow('')), _joi.default.func()),
    enumName: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()),
    hasMany: _joi.default.boolean().default(false),
    options: _joi.default.array().min(1).items(_joi.default.alternatives().try(_joi.default.string(), _joi.default.object({
        label: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
            _joi.default.string()
        ])),
        value: _joi.default.string().required().allow('')
    }))).required()
});
const radio = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('radio').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema
        }),
        layout: _joi.default.string().valid('vertical', 'horizontal')
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.string().allow(''), _joi.default.func()),
    enumName: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()),
    options: _joi.default.array().min(1).items(_joi.default.alternatives().try(_joi.default.string(), _joi.default.object({
        label: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
            _joi.default.string()
        ])).required(),
        value: _joi.default.string().required().allow('')
    }))).required()
});
const row = baseField.keys({
    type: _joi.default.string().valid('row').required(),
    admin: baseAdminFields.default(),
    fields: _joi.default.array().items(_joi.default.link('#field'))
});
const collapsible = baseField.keys({
    type: _joi.default.string().valid('collapsible').required(),
    admin: baseAdminFields.default(),
    fields: _joi.default.array().items(_joi.default.link('#field')),
    label: _joi.default.alternatives().try(_joi.default.string(), _componentSchema.componentSchema)
});
const tab = baseField.keys({
    name: _joi.default.string().when('localized', {
        is: _joi.default.exist(),
        then: _joi.default.required()
    }),
    description: _joi.default.alternatives().try(_joi.default.string(), _componentSchema.componentSchema),
    fields: _joi.default.array().items(_joi.default.link('#field')).required(),
    interfaceName: _joi.default.string().when('name', {
        not: _joi.default.exist(),
        then: _joi.default.forbidden()
    }),
    label: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
        _joi.default.string()
    ])).when('name', {
        is: _joi.default.not(),
        then: _joi.default.required()
    }),
    localized: _joi.default.boolean(),
    saveToJWT: _joi.default.alternatives().try(_joi.default.boolean(), _joi.default.string())
});
const tabs = baseField.keys({
    type: _joi.default.string().valid('tabs').required(),
    admin: baseAdminFields.keys({
        description: _joi.default.forbidden()
    }),
    fields: _joi.default.forbidden(),
    localized: _joi.default.forbidden(),
    tabs: _joi.default.array().items(tab).required()
});
const group = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('group').required(),
    admin: baseAdminFields.keys({
        hideGutter: _joi.default.boolean().default(true)
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.object(), _joi.default.func()),
    fields: _joi.default.array().items(_joi.default.link('#field')),
    interfaceName: _joi.default.string()
});
const array = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('array').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            RowLabel: _componentSchema.componentSchema
        }).default({})
    }).default({}),
    dbName: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()),
    defaultValue: _joi.default.alternatives().try(_joi.default.array().items(_joi.default.object()), _joi.default.func()),
    fields: _joi.default.array().items(_joi.default.link('#field')).required(),
    interfaceName: _joi.default.string(),
    labels: _joi.default.object({
        plural: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
            _joi.default.string()
        ])),
        singular: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
            _joi.default.string()
        ]))
    }),
    maxRows: _joi.default.number(),
    minRows: _joi.default.number()
});
const upload = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('upload').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema
        })
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.object(), _joi.default.func()),
    filterOptions: _joi.default.alternatives().try(_joi.default.object(), _joi.default.func()),
    maxDepth: _joi.default.number(),
    relationTo: _joi.default.string().required()
});
const checkbox = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('checkbox').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema,
            afterInput: _joi.default.array().items(_componentSchema.componentSchema),
            beforeInput: _joi.default.array().items(_componentSchema.componentSchema)
        })
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.boolean(), _joi.default.func())
});
const point = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('point').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema,
            afterInput: _joi.default.array().items(_componentSchema.componentSchema),
            beforeInput: _joi.default.array().items(_componentSchema.componentSchema)
        })
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.array().items(_joi.default.number()).max(2).min(2), _joi.default.func())
});
const relationship = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('relationship').required(),
    admin: baseAdminFields.keys({
        allowCreate: _joi.default.boolean().default(true),
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema
        }),
        isSortable: _joi.default.boolean().default(false),
        sortOptions: _joi.default.alternatives().conditional(_joi.default.ref('...relationTo'), {
            is: _joi.default.string(),
            otherwise: _joi.default.object().pattern(_joi.default.string(), _joi.default.string()),
            then: _joi.default.string()
        })
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.func()),
    filterOptions: _joi.default.alternatives().try(_joi.default.object(), _joi.default.func()),
    hasMany: _joi.default.boolean().default(false),
    max: _joi.default.number().when('hasMany', {
        is: _joi.default.not(true),
        then: _joi.default.forbidden()
    }).warning('deprecated', {
        message: 'Use maxRows instead.'
    }),
    maxDepth: _joi.default.number(),
    maxRows: _joi.default.number().when('hasMany', {
        is: _joi.default.not(true),
        then: _joi.default.forbidden()
    }),
    min: _joi.default.number().when('hasMany', {
        is: _joi.default.not(true),
        then: _joi.default.forbidden()
    }).warning('deprecated', {
        message: 'Use minRows instead.'
    }),
    minRows: _joi.default.number().when('hasMany', {
        is: _joi.default.not(true),
        then: _joi.default.forbidden()
    }),
    relationTo: _joi.default.alternatives().try(_joi.default.string().required(), _joi.default.array().items(_joi.default.string()))
});
const blocks = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('blocks').required(),
    blocks: _joi.default.array().items(_joi.default.object({
        slug: _joi.default.string().required(),
        custom: _joi.default.object().pattern(_joi.default.string(), _joi.default.any()),
        dbName: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func()),
        fields: _joi.default.array().items(_joi.default.link('#field')),
        graphQL: _joi.default.object().keys({
            singularName: _joi.default.string()
        }),
        imageAltText: _joi.default.string(),
        imageURL: _joi.default.string(),
        interfaceName: _joi.default.string(),
        labels: _joi.default.object({
            plural: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
                _joi.default.string()
            ])),
            singular: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
                _joi.default.string()
            ]))
        })
    })).required(),
    defaultValue: _joi.default.alternatives().try(_joi.default.array().items(_joi.default.object()), _joi.default.func()),
    labels: _joi.default.object({
        plural: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
            _joi.default.string()
        ])),
        singular: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
            _joi.default.string()
        ]))
    }),
    maxRows: _joi.default.number(),
    minRows: _joi.default.number()
});
const richText = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('richText').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema
        })
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.array().items(_joi.default.object()), _joi.default.func(), _joi.default.object()),
    editor: _joi.default.object().keys({
        CellComponent: _componentSchema.componentSchema.optional(),
        FieldComponent: _componentSchema.componentSchema.optional(),
        LazyCellComponent: _joi.default.func().optional(),
        LazyFieldComponent: _joi.default.func().optional(),
        afterReadPromise: _joi.default.func().optional(),
        outputSchema: _joi.default.func().optional(),
        populationPromise: _joi.default.func().optional(),
        validate: _joi.default.func().required()
    }).unknown()
});
const date = baseField.keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('date').required(),
    admin: baseAdminFields.keys({
        components: baseAdminComponentFields.keys({
            Error: _componentSchema.componentSchema,
            Label: _componentSchema.componentSchema,
            afterInput: _joi.default.array().items(_componentSchema.componentSchema),
            beforeInput: _joi.default.array().items(_componentSchema.componentSchema)
        }),
        date: _joi.default.object({
            displayFormat: _joi.default.string(),
            maxDate: _joi.default.date(),
            maxTime: _joi.default.date(),
            minDate: _joi.default.date(),
            minTime: _joi.default.date(),
            monthsToShow: _joi.default.number(),
            overrides: _joi.default.object().unknown(),
            pickerAppearance: _joi.default.string(),
            timeFormat: _joi.default.string(),
            timeIntervals: _joi.default.number()
        }),
        placeholder: _joi.default.string()
    }),
    defaultValue: _joi.default.alternatives().try(_joi.default.string(), _joi.default.func())
});
const ui = _joi.default.object().keys({
    name: _joi.default.string().required(),
    type: _joi.default.string().valid('ui').required(),
    admin: _joi.default.object().keys({
        components: _joi.default.object().keys({
            Cell: _componentSchema.componentSchema,
            Field: _componentSchema.componentSchema
        }).default({}),
        condition: _joi.default.func(),
        position: _joi.default.string().valid('sidebar'),
        width: _joi.default.string()
    }).default(),
    custom: _joi.default.object().pattern(_joi.default.string(), _joi.default.any()),
    label: _joi.default.alternatives().try(_joi.default.string(), _joi.default.object().pattern(_joi.default.string(), [
        _joi.default.string()
    ]))
});
const fieldSchema = _joi.default.alternatives().try(text, number, textarea, email, code, json, select, group, array, row, collapsible, tabs, radio, relationship, checkbox, upload, richText, blocks, date, point, ui).id('field');
const _default = fieldSchema;

//# sourceMappingURL=data:application/json;base64,