"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "sanitizeFields", {
    enumerable: true,
    get: function() {
        return sanitizeFields;
    }
});
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../admin/components/forms/withCondition"));
const _errors = require("../../errors");
const _MissingEditorProps = /*#__PURE__*/ _interop_require_default(require("../../errors/MissingEditorProps"));
const _formatLabels = require("../../utilities/formatLabels");
const _baseBlockFields = require("../baseFields/baseBlockFields");
const _baseIDField = require("../baseFields/baseIDField");
const _validations = /*#__PURE__*/ _interop_require_default(require("../validations"));
const _types = require("./types");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const sanitizeFields = ({ config, existingFieldNames = new Set(), fields, requireFieldLevelRichTextEditor = false, validRelationships })=>{
    if (!fields) return [];
    return fields.map((unsanitizedField)=>{
        const field = {
            ...unsanitizedField
        };
        if (!field.type) throw new _errors.MissingFieldType(field);
        // assert that field names do not contain forbidden characters
        if ((0, _types.fieldAffectsData)(field) && field.name.includes('.')) {
            throw new _errors.InvalidFieldName(field, field.name);
        }
        // Make sure that the richText field has an editor
        if (field.type === 'richText' && !field.editor) {
            if (config.editor && !requireFieldLevelRichTextEditor) {
                field.editor = config.editor;
            } else {
                throw new _MissingEditorProps.default(field);
            }
        }
        // Auto-label
        if ('name' in field && field.name && typeof field.label !== 'object' && typeof field.label !== 'string' && field.label !== false) {
            field.label = (0, _formatLabels.toWords)(field.name);
        }
        if (field.type === 'checkbox' && typeof field.defaultValue === 'undefined' && field.required === true) {
            field.defaultValue = false;
        }
        if (field.type === 'relationship' || field.type === 'upload') {
            if (validRelationships) {
                const relationships = Array.isArray(field.relationTo) ? field.relationTo : [
                    field.relationTo
                ];
                relationships.forEach((relationship)=>{
                    if (!validRelationships.includes(relationship)) {
                        throw new _errors.InvalidFieldRelationship(field, relationship);
                    }
                });
            }
            if (field.type === 'relationship') {
                if (field.min && !field.minRows) {
                    console.warn(`(payload): The "min" property is deprecated for the Relationship field "${field.name}" and will be removed in a future version. Please use "minRows" instead.`);
                }
                if (field.max && !field.maxRows) {
                    console.warn(`(payload): The "max" property is deprecated for the Relationship field "${field.name}" and will be removed in a future version. Please use "maxRows" instead.`);
                }
                field.minRows = field.minRows || field.min;
                field.maxRows = field.maxRows || field.max;
            }
        }
        if (field.type === 'blocks' && field.blocks) {
            field.blocks = field.blocks.map((block)=>({
                    ...block,
                    fields: block.fields.concat(_baseBlockFields.baseBlockFields)
                }));
        }
        if (field.type === 'array' && field.fields) {
            field.fields.push(_baseIDField.baseIDField);
        }
        if ((field.type === 'blocks' || field.type === 'array') && field.label) {
            field.labels = field.labels || (0, _formatLabels.formatLabels)(field.name);
        }
        if ((0, _types.fieldAffectsData)(field)) {
            if (existingFieldNames.has(field.name)) {
                throw new _errors.DuplicateFieldName(field.name);
            } else if (![
                'blockName',
                'id'
            ].includes(field.name)) {
                existingFieldNames.add(field.name);
            }
            if (field.localized && !config.localization) delete field.localized;
            if (typeof field.validate === 'undefined') {
                const defaultValidate = _validations.default[field.type];
                if (defaultValidate) {
                    field.validate = (val, options)=>defaultValidate(val, {
                            ...field,
                            ...options
                        });
                } else {
                    field.validate = ()=>true;
                }
            }
            if (!field.hooks) field.hooks = {};
            if (!field.access) field.access = {};
        }
        if (field.admin) {
            if (field.admin.condition && field.admin.components?.Field) {
                field.admin.components.Field = (0, _withCondition.default)(field.admin.components?.Field);
            }
        } else {
            field.admin = {};
        }
        if ('fields' in field && field.fields) {
            field.fields = sanitizeFields({
                config,
                existingFieldNames: (0, _types.fieldAffectsData)(field) ? new Set() : existingFieldNames,
                fields: field.fields,
                requireFieldLevelRichTextEditor,
                validRelationships
            });
        }
        if (field.type === 'tabs') {
            field.tabs = field.tabs.map((tab)=>{
                const unsanitizedTab = {
                    ...tab
                };
                if ((0, _types.tabHasName)(tab) && typeof tab.label === 'undefined') {
                    unsanitizedTab.label = (0, _formatLabels.toWords)(tab.name);
                }
                unsanitizedTab.fields = sanitizeFields({
                    config,
                    existingFieldNames: (0, _types.tabHasName)(tab) ? new Set() : existingFieldNames,
                    fields: tab.fields,
                    requireFieldLevelRichTextEditor,
                    validRelationships
                });
                return unsanitizedTab;
            });
        }
        if ('blocks' in field && field.blocks) {
            field.blocks = field.blocks.map((block)=>{
                const unsanitizedBlock = {
                    ...block
                };
                unsanitizedBlock.labels = !unsanitizedBlock.labels ? (0, _formatLabels.formatLabels)(unsanitizedBlock.slug) : unsanitizedBlock.labels;
                unsanitizedBlock.fields = sanitizeFields({
                    config,
                    existingFieldNames: new Set(),
                    fields: block.fields,
                    requireFieldLevelRichTextEditor,
                    validRelationships
                });
                return unsanitizedBlock;
            });
        }
        return field;
    });
};

//# sourceMappingURL=data:application/json;base64,