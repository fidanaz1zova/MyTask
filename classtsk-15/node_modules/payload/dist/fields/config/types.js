/* eslint-disable no-use-before-define */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    fieldAffectsData: function() {
        return fieldAffectsData;
    },
    fieldHasMaxDepth: function() {
        return fieldHasMaxDepth;
    },
    fieldHasSubFields: function() {
        return fieldHasSubFields;
    },
    fieldIsArrayType: function() {
        return fieldIsArrayType;
    },
    fieldIsBlockType: function() {
        return fieldIsBlockType;
    },
    fieldIsGroupType: function() {
        return fieldIsGroupType;
    },
    fieldIsLocalized: function() {
        return fieldIsLocalized;
    },
    fieldIsPresentationalOnly: function() {
        return fieldIsPresentationalOnly;
    },
    fieldSupportsMany: function() {
        return fieldSupportsMany;
    },
    optionIsObject: function() {
        return optionIsObject;
    },
    optionIsValue: function() {
        return optionIsValue;
    },
    optionsAreObjects: function() {
        return optionsAreObjects;
    },
    tabHasName: function() {
        return tabHasName;
    },
    valueIsValueWithRelation: function() {
        return valueIsValueWithRelation;
    }
});
function valueIsValueWithRelation(value) {
    return value !== null && typeof value === 'object' && 'relationTo' in value && 'value' in value;
}
function fieldHasSubFields(field) {
    return field.type === 'group' || field.type === 'array' || field.type === 'row' || field.type === 'collapsible';
}
function fieldIsArrayType(field) {
    return field.type === 'array';
}
function fieldIsBlockType(field) {
    return field.type === 'blocks';
}
function fieldIsGroupType(field) {
    return field.type === 'group';
}
function optionIsObject(option) {
    return typeof option === 'object';
}
function optionsAreObjects(options) {
    return Array.isArray(options) && typeof options?.[0] === 'object';
}
function optionIsValue(option) {
    return typeof option === 'string';
}
function fieldSupportsMany(field) {
    return field.type === 'select' || field.type === 'relationship';
}
function fieldHasMaxDepth(field) {
    return (field.type === 'upload' || field.type === 'relationship') && typeof field.maxDepth === 'number';
}
function fieldIsPresentationalOnly(field) {
    return field.type === 'ui';
}
function fieldAffectsData(field) {
    return 'name' in field && !fieldIsPresentationalOnly(field);
}
function tabHasName(tab) {
    return 'name' in tab;
}
function fieldIsLocalized(field) {
    return 'localized' in field && field.localized;
}

//# sourceMappingURL=data:application/json;base64,