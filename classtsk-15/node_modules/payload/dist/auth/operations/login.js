"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
const _utils = require("../../collections/operations/utils");
const _errors = require("../../errors");
const _afterRead = require("../../fields/hooks/afterRead");
const _commitTransaction = require("../../utilities/commitTransaction");
const _getCookieExpiration = /*#__PURE__*/ _interop_require_default(require("../../utilities/getCookieExpiration"));
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("../../utilities/sanitizeInternalFields"));
const _isLocked = /*#__PURE__*/ _interop_require_default(require("../isLocked"));
const _authenticate = require("../strategies/local/authenticate");
const _incrementLoginAttempts = require("../strategies/local/incrementLoginAttempts");
const _resetLoginAttempts = require("../strategies/local/resetLoginAttempts");
const _getFieldsToSign = require("./getFieldsToSign");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function login(incomingArgs) {
    let args = incomingArgs;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(args.req);
        // /////////////////////////////////////
        // beforeOperation - Collection
        // /////////////////////////////////////
        await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook)=>{
            await priorHook;
            args = await hook({
                args,
                collection: args.collection?.config,
                context: args.req.context,
                operation: 'login',
                req: args.req
            }) || args;
        }, Promise.resolve());
        const { collection: { config: collectionConfig }, data, depth, overrideAccess, req, req: { fallbackLocale, locale, payload, payload: { config, secret } }, showHiddenFields } = args;
        // /////////////////////////////////////
        // Login
        // /////////////////////////////////////
        const { email: unsanitizedEmail, password } = data;
        if (typeof unsanitizedEmail !== 'string' || unsanitizedEmail.trim() === '') {
            throw new _errors.ValidationError([
                {
                    field: 'email',
                    message: req.i18n.t('validation:required')
                }
            ]);
        }
        if (typeof password !== 'string' || password.trim() === '') {
            throw new _errors.ValidationError([
                {
                    field: 'password',
                    message: req.i18n.t('validation:required')
                }
            ]);
        }
        const email = unsanitizedEmail ? unsanitizedEmail.toLowerCase().trim() : null;
        let user = await payload.db.findOne({
            collection: collectionConfig.slug,
            req,
            where: {
                email: {
                    equals: email.toLowerCase()
                }
            }
        });
        if (!user || args.collection.config.auth.verify && user._verified === false) {
            throw new _errors.AuthenticationError(req.t);
        }
        if (user && (0, _isLocked.default)(user.lockUntil)) {
            throw new _errors.LockedAuth(req.t);
        }
        const authResult = await (0, _authenticate.authenticateLocalStrategy)({
            doc: user,
            password
        });
        user = (0, _sanitizeInternalFields.default)(user);
        const maxLoginAttemptsEnabled = args.collection.config.auth.maxLoginAttempts > 0;
        if (!authResult) {
            if (maxLoginAttemptsEnabled) {
                await (0, _incrementLoginAttempts.incrementLoginAttempts)({
                    collection: collectionConfig,
                    doc: user,
                    payload: req.payload,
                    req
                });
            }
            if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
            throw new _errors.AuthenticationError(req.t);
        }
        if (maxLoginAttemptsEnabled) {
            await (0, _resetLoginAttempts.resetLoginAttempts)({
                collection: collectionConfig,
                doc: user,
                payload: req.payload,
                req
            });
        }
        const fieldsToSign = (0, _getFieldsToSign.getFieldsToSign)({
            collectionConfig,
            email,
            user
        });
        await collectionConfig.hooks.beforeLogin.reduce(async (priorHook, hook)=>{
            await priorHook;
            user = await hook({
                collection: args.collection?.config,
                context: args.req.context,
                req: args.req,
                user
            }) || user;
        }, Promise.resolve());
        const token = _jsonwebtoken.default.sign(fieldsToSign, secret, {
            expiresIn: collectionConfig.auth.tokenExpiration
        });
        if (args.res) {
            const cookieOptions = {
                domain: undefined,
                expires: (0, _getCookieExpiration.default)(collectionConfig.auth.tokenExpiration),
                httpOnly: true,
                path: '/',
                sameSite: collectionConfig.auth.cookies.sameSite,
                secure: collectionConfig.auth.cookies.secure
            };
            if (collectionConfig.auth.cookies.domain) cookieOptions.domain = collectionConfig.auth.cookies.domain;
            args.res.cookie(`${config.cookiePrefix}-token`, token, cookieOptions);
        }
        req.user = user;
        // /////////////////////////////////////
        // afterLogin - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterLogin.reduce(async (priorHook, hook)=>{
            await priorHook;
            user = await hook({
                collection: args.collection?.config,
                context: args.req.context,
                req: args.req,
                token,
                user
            }) || user;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterRead - Fields
        // /////////////////////////////////////
        user = await (0, _afterRead.afterRead)({
            collection: collectionConfig,
            context: req.context,
            depth,
            doc: user,
            fallbackLocale,
            global: null,
            locale,
            overrideAccess,
            req,
            showHiddenFields
        });
        // /////////////////////////////////////
        // afterRead - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            user = await hook({
                collection: args.collection?.config,
                context: req.context,
                doc: user,
                req
            }) || user;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterRead - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            user = await hook({
                collection: args.collection?.config,
                context: req.context,
                doc: user,
                req
            }) || user;
        }, Promise.resolve());
        let result = {
            exp: _jsonwebtoken.default.decode(token).exp,
            token,
            user
        };
        // /////////////////////////////////////
        // afterOperation - Collection
        // /////////////////////////////////////
        result = await (0, _utils.buildAfterOperation)({
            args,
            collection: args.collection?.config,
            operation: 'login',
            result
        });
        if (collectionConfig.auth.removeTokenFromResponses) {
            delete result.token;
        }
        // /////////////////////////////////////
        // Return results
        // /////////////////////////////////////
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return result;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(args.req);
        throw error;
    }
}
const _default = login;

//# sourceMappingURL=data:application/json;base64,