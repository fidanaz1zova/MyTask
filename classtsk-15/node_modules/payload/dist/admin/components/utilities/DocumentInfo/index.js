"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DocumentInfoProvider: function() {
        return DocumentInfoProvider;
    },
    useDocumentInfo: function() {
        return useDocumentInfo;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _Auth = require("../Auth");
const _Config = require("../Config");
const _Locale = require("../Locale");
const _Preferences = require("../Preferences");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Context = /*#__PURE__*/ (0, _react.createContext)({});
const useDocumentInfo = ()=>(0, _react.useContext)(Context);
const DocumentInfoProvider = ({ id: idFromProps, children, collection, global, idFromParams: getIDFromParams })=>{
    const { id: idFromParams } = (0, _reactrouterdom.useParams)();
    const id = idFromProps || (getIDFromParams ? idFromParams : null);
    const { routes: { api }, serverURL } = (0, _Config.useConfig)();
    const { getPreference, setPreference } = (0, _Preferences.usePreferences)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    const { permissions } = (0, _Auth.useAuth)();
    const { code } = (0, _Locale.useLocale)();
    const [publishedDoc, setPublishedDoc] = (0, _react.useState)(null);
    const [versions, setVersions] = (0, _react.useState)(null);
    const [unpublishedVersions, setUnpublishedVersions] = (0, _react.useState)(null);
    const baseURL = `${serverURL}${api}`;
    let slug;
    let pluralType;
    let preferencesKey;
    if (global) {
        slug = global.slug;
        pluralType = 'globals';
        preferencesKey = `global-${slug}`;
    }
    if (collection) {
        slug = collection.slug;
        pluralType = 'collections';
        if (id) {
            preferencesKey = `collection-${slug}-${id}`;
        }
    }
    const [docPermissions, setDocPermissions] = (0, _react.useState)(permissions[pluralType][slug]);
    const getVersions = (0, _react.useCallback)(async ()=>{
        let versionFetchURL;
        let publishedFetchURL;
        let draftsEnabled = false;
        let shouldFetchVersions = false;
        let unpublishedVersionJSON = null;
        let versionJSON = null;
        let shouldFetch = true;
        const versionParams = {
            depth: 0,
            where: {
                and: []
            }
        };
        const publishedVersionParams = {
            depth: 0,
            locale: code || undefined,
            where: {
                and: [
                    {
                        or: [
                            {
                                _status: {
                                    equals: 'published'
                                }
                            },
                            {
                                _status: {
                                    exists: false
                                }
                            }
                        ]
                    }
                ]
            }
        };
        if (global) {
            draftsEnabled = Boolean(global?.versions?.drafts);
            shouldFetchVersions = Boolean(global?.versions);
            versionFetchURL = `${baseURL}/globals/${global.slug}/versions`;
            publishedFetchURL = `${baseURL}/globals/${global.slug}?${_qs.default.stringify(publishedVersionParams)}`;
        }
        if (collection) {
            draftsEnabled = Boolean(collection?.versions?.drafts);
            shouldFetchVersions = Boolean(collection?.versions);
            versionFetchURL = `${baseURL}/${collection.slug}/versions`;
            publishedVersionParams.where.and.push({
                id: {
                    equals: id
                }
            });
            publishedFetchURL = `${baseURL}/${collection.slug}?${_qs.default.stringify(publishedVersionParams)}`;
            if (!id) {
                shouldFetch = false;
            }
            versionParams.where.and.push({
                parent: {
                    equals: id
                }
            });
        }
        if (shouldFetch) {
            let publishedJSON;
            if (draftsEnabled) {
                publishedJSON = await fetch(publishedFetchURL, {
                    credentials: 'include',
                    headers: {
                        'Accept-Language': i18n.language
                    }
                }).then((res)=>res.json());
                if (collection) {
                    publishedJSON = publishedJSON?.docs?.[0];
                }
            }
            if (shouldFetchVersions) {
                versionJSON = await fetch(`${versionFetchURL}?${_qs.default.stringify(versionParams)}`, {
                    credentials: 'include',
                    headers: {
                        'Accept-Language': i18n.language
                    }
                }).then((res)=>res.json());
                if (publishedJSON?.updatedAt) {
                    const newerVersionParams = {
                        ...versionParams,
                        where: {
                            ...versionParams.where,
                            and: [
                                ...versionParams.where.and,
                                {
                                    updatedAt: {
                                        greater_than: publishedJSON?.updatedAt
                                    }
                                }
                            ]
                        }
                    };
                    // Get any newer versions available
                    const newerVersionRes = await fetch(`${versionFetchURL}?${_qs.default.stringify(newerVersionParams)}`, {
                        credentials: 'include',
                        headers: {
                            'Accept-Language': i18n.language
                        }
                    });
                    if (newerVersionRes.status === 200) {
                        unpublishedVersionJSON = await newerVersionRes.json();
                    }
                }
            }
            setPublishedDoc(publishedJSON);
            setVersions(versionJSON);
            setUnpublishedVersions(unpublishedVersionJSON);
        }
    }, [
        i18n,
        global,
        collection,
        id,
        baseURL,
        code
    ]);
    const getDocPermissions = _react.default.useCallback(async ()=>{
        let docAccessURL;
        const params = {
            locale: code || undefined
        };
        if (pluralType === 'globals') {
            docAccessURL = `/globals/${slug}/access`;
        } else if (pluralType === 'collections' && id) {
            docAccessURL = `/${slug}/access/${id}`;
        }
        if (docAccessURL) {
            const res = await fetch(`${serverURL}${api}${docAccessURL}?${_qs.default.stringify(params)}`, {
                credentials: 'include',
                headers: {
                    'Accept-Language': i18n.language
                }
            });
            try {
                const json = await res.json();
                setDocPermissions(json);
            } catch (e) {
                console.error('Unable to fetch document permissions', e);
            }
        }
    }, [
        serverURL,
        api,
        pluralType,
        slug,
        id,
        i18n.language,
        code
    ]);
    const getDocPreferences = (0, _react.useCallback)(async ()=>{
        return getPreference(preferencesKey);
    }, [
        getPreference,
        preferencesKey
    ]);
    const setDocFieldPreferences = (0, _react.useCallback)(async (path, fieldPreferences)=>{
        const allPreferences = await getDocPreferences();
        if (preferencesKey) {
            try {
                await setPreference(preferencesKey, {
                    ...allPreferences,
                    fields: {
                        ...allPreferences?.fields || {},
                        [path]: {
                            ...allPreferences?.fields?.[path],
                            ...fieldPreferences
                        }
                    }
                });
            } catch (e) {
                console.error(e);
            }
        }
    }, [
        setPreference,
        preferencesKey,
        getDocPreferences
    ]);
    (0, _react.useEffect)(()=>{
        getVersions();
    }, [
        getVersions
    ]);
    (0, _react.useEffect)(()=>{
        getDocPermissions();
    }, [
        getDocPermissions
    ]);
    const value = {
        id,
        slug,
        collection,
        docPermissions,
        getDocPermissions,
        getDocPreferences,
        getVersions,
        global,
        preferencesKey,
        publishedDoc,
        setDocFieldPreferences,
        unpublishedVersions,
        versions
    };
    return /*#__PURE__*/ _react.default.createElement(Context.Provider, {
        value: value
    }, children);
};

//# sourceMappingURL=data:application/json;base64,