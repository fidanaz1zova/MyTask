/* eslint-disable no-param-reassign */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "addFieldStatePromise", {
    enumerable: true,
    get: function() {
        return addFieldStatePromise;
    }
});
const _bsonobjectid = /*#__PURE__*/ _interop_require_default(require("bson-objectid"));
const _types = require("../../../../../fields/config/types");
const _getDefaultValue = /*#__PURE__*/ _interop_require_default(require("../../../../../fields/getDefaultValue"));
const _iterateFields = require("./iterateFields");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const addFieldStatePromise = async (args)=>{
    const { id, anyParentLocalized = false, config, data, field, filter, forceFullValue = false, fullData, includeSchema = false, locale, omitParents = false, operation, passesCondition, path, preferences, skipConditionChecks = false, skipValidation = false, state, t, user } = args;
    if ((0, _types.fieldAffectsData)(field)) {
        const fieldState = {
            condition: field.admin?.condition,
            fieldSchema: includeSchema ? field : undefined,
            initialValue: undefined,
            passesCondition,
            valid: true,
            validate: field.validate,
            value: undefined
        };
        const valueWithDefault = await (0, _getDefaultValue.default)({
            defaultValue: field.defaultValue,
            locale,
            user,
            value: data?.[field.name]
        });
        if (data?.[field.name]) {
            data[field.name] = valueWithDefault;
        }
        let validationResult = true;
        if (typeof fieldState.validate === 'function' && !skipValidation) {
            validationResult = await fieldState.validate(data?.[field.name], {
                ...field,
                id,
                config,
                data: fullData,
                operation,
                siblingData: data,
                t,
                user
            });
        }
        if (typeof validationResult === 'string') {
            fieldState.errorMessage = validationResult;
            fieldState.valid = false;
        } else {
            fieldState.valid = true;
        }
        switch(field.type){
            case 'array':
                {
                    const arrayValue = Array.isArray(valueWithDefault) ? valueWithDefault : [];
                    const { promises, rowMetadata } = arrayValue.reduce((acc, row, i)=>{
                        const rowPath = `${path}${field.name}.${i}.`;
                        row.id = row?.id || new _bsonobjectid.default().toHexString();
                        if (!omitParents && (!filter || filter(args))) {
                            state[`${rowPath}id`] = {
                                fieldSchema: includeSchema ? field.fields.find((field)=>'name' in field && field.name === 'id') : undefined,
                                initialValue: row.id,
                                valid: true,
                                value: row.id
                            };
                        }
                        acc.promises.push((0, _iterateFields.iterateFields)({
                            id,
                            anyParentLocalized: field.localized || anyParentLocalized,
                            config,
                            data: row,
                            fields: field.fields,
                            filter,
                            forceFullValue,
                            fullData,
                            includeSchema,
                            locale,
                            omitParents,
                            operation,
                            parentPassesCondition: passesCondition,
                            path: rowPath,
                            preferences,
                            skipConditionChecks,
                            skipValidation,
                            state,
                            t,
                            user
                        }));
                        const collapsedRowIDs = preferences?.fields?.[`${path}${field.name}`]?.collapsed;
                        acc.rowMetadata.push({
                            id: row.id,
                            childErrorPaths: new Set(),
                            collapsed: collapsedRowIDs === undefined ? field.admin.initCollapsed : collapsedRowIDs.includes(row.id)
                        });
                        return acc;
                    }, {
                        promises: [],
                        rowMetadata: []
                    });
                    await Promise.all(promises);
                    // Add values to field state
                    if (valueWithDefault === null) {
                        fieldState.value = null;
                        fieldState.initialValue = null;
                    } else {
                        fieldState.value = forceFullValue ? arrayValue : arrayValue.length;
                        fieldState.initialValue = forceFullValue ? arrayValue : arrayValue.length;
                        if (arrayValue.length > 0) {
                            fieldState.disableFormData = true;
                        }
                    }
                    fieldState.rows = rowMetadata;
                    // Add field to state
                    if (!omitParents && (!filter || filter(args))) {
                        state[`${path}${field.name}`] = fieldState;
                    }
                    break;
                }
            case 'blocks':
                {
                    const blocksValue = Array.isArray(valueWithDefault) ? valueWithDefault : [];
                    const { promises, rowMetadata } = blocksValue.reduce((acc, row, i)=>{
                        const block = field.blocks.find((blockType)=>blockType.slug === row.blockType);
                        const rowPath = `${path}${field.name}.${i}.`;
                        if (block) {
                            row.id = row?.id || new _bsonobjectid.default().toHexString();
                            if (!omitParents && (!filter || filter(args))) {
                                state[`${rowPath}id`] = {
                                    fieldSchema: includeSchema ? block.fields.find((blockField)=>'name' in blockField && blockField.name === 'id') : undefined,
                                    initialValue: row.id,
                                    valid: true,
                                    value: row.id
                                };
                                state[`${rowPath}blockType`] = {
                                    fieldSchema: includeSchema ? block.fields.find((blockField)=>'name' in blockField && blockField.name === 'blockType') : undefined,
                                    initialValue: row.blockType,
                                    valid: true,
                                    value: row.blockType
                                };
                                state[`${rowPath}blockName`] = {
                                    fieldSchema: includeSchema ? block.fields.find((blockField)=>'name' in blockField && blockField.name === 'blockName') : undefined,
                                    initialValue: row.blockName,
                                    valid: true,
                                    value: row.blockName
                                };
                            }
                            acc.promises.push((0, _iterateFields.iterateFields)({
                                id,
                                anyParentLocalized: field.localized || anyParentLocalized,
                                config,
                                data: row,
                                fields: block.fields,
                                filter,
                                forceFullValue,
                                fullData,
                                includeSchema,
                                locale,
                                omitParents,
                                operation,
                                parentPassesCondition: passesCondition,
                                path: rowPath,
                                preferences,
                                skipConditionChecks,
                                skipValidation,
                                state,
                                t,
                                user
                            }));
                            const collapsedRowIDs = preferences?.fields?.[`${path}${field.name}`]?.collapsed;
                            acc.rowMetadata.push({
                                id: row.id,
                                blockType: row.blockType,
                                childErrorPaths: new Set(),
                                collapsed: collapsedRowIDs === undefined ? field.admin.initCollapsed : collapsedRowIDs.includes(row.id)
                            });
                        }
                        return acc;
                    }, {
                        promises: [],
                        rowMetadata: []
                    });
                    await Promise.all(promises);
                    // Add values to field state
                    if (valueWithDefault === null) {
                        fieldState.value = null;
                        fieldState.initialValue = null;
                    } else {
                        fieldState.value = forceFullValue ? blocksValue : blocksValue.length;
                        fieldState.initialValue = forceFullValue ? blocksValue : blocksValue.length;
                        if (blocksValue.length > 0) {
                            fieldState.disableFormData = true;
                        }
                    }
                    fieldState.rows = rowMetadata;
                    // Add field to state
                    if (!omitParents && (!filter || filter(args))) {
                        state[`${path}${field.name}`] = fieldState;
                    }
                    break;
                }
            case 'group':
                {
                    await (0, _iterateFields.iterateFields)({
                        id,
                        anyParentLocalized: field.localized || anyParentLocalized,
                        config,
                        data: data?.[field.name] || {},
                        fields: field.fields,
                        filter,
                        forceFullValue,
                        fullData,
                        includeSchema,
                        locale,
                        omitParents,
                        operation,
                        parentPassesCondition: passesCondition,
                        path: `${path}${field.name}.`,
                        preferences,
                        skipConditionChecks,
                        skipValidation,
                        state,
                        t,
                        user
                    });
                    break;
                }
            case 'relationship':
                {
                    if (field.hasMany) {
                        const relationshipValue = Array.isArray(valueWithDefault) ? valueWithDefault.map((relationship)=>{
                            if (Array.isArray(field.relationTo)) {
                                return {
                                    relationTo: relationship.relationTo,
                                    value: relationship.value && typeof relationship.value === 'object' ? relationship.value?.id : relationship.value
                                };
                            }
                            if (typeof relationship === 'object' && relationship !== null) {
                                return relationship.id;
                            }
                            return relationship;
                        }) : undefined;
                        fieldState.value = relationshipValue;
                        fieldState.initialValue = relationshipValue;
                    } else if (Array.isArray(field.relationTo)) {
                        if (valueWithDefault && typeof valueWithDefault === 'object' && 'relationTo' in valueWithDefault && 'value' in valueWithDefault) {
                            const value = typeof valueWithDefault?.value === 'object' && valueWithDefault?.value && 'id' in valueWithDefault.value ? valueWithDefault.value.id : valueWithDefault.value;
                            const relationshipValue = {
                                relationTo: valueWithDefault?.relationTo,
                                value
                            };
                            fieldState.value = relationshipValue;
                            fieldState.initialValue = relationshipValue;
                        }
                    } else {
                        const relationshipValue = valueWithDefault && typeof valueWithDefault === 'object' && 'id' in valueWithDefault ? valueWithDefault.id : valueWithDefault;
                        fieldState.value = relationshipValue;
                        fieldState.initialValue = relationshipValue;
                    }
                    if (!filter || filter(args)) {
                        state[`${path}${field.name}`] = fieldState;
                    }
                    break;
                }
            case 'upload':
                {
                    const relationshipValue = valueWithDefault && typeof valueWithDefault === 'object' && 'id' in valueWithDefault ? valueWithDefault.id : valueWithDefault;
                    fieldState.value = relationshipValue;
                    fieldState.initialValue = relationshipValue;
                    if (!filter || filter(args)) {
                        state[`${path}${field.name}`] = fieldState;
                    }
                    break;
                }
            default:
                {
                    fieldState.value = valueWithDefault;
                    fieldState.initialValue = valueWithDefault;
                    // Add field to state
                    if (!filter || filter(args)) {
                        state[`${path}${field.name}`] = fieldState;
                    }
                    break;
                }
        }
    } else if ((0, _types.fieldHasSubFields)(field)) {
        // Handle field types that do not use names (row, etc)
        await (0, _iterateFields.iterateFields)({
            id,
            anyParentLocalized: field.localized || anyParentLocalized,
            config,
            data,
            fields: field.fields,
            filter,
            forceFullValue,
            fullData,
            includeSchema,
            locale,
            omitParents,
            operation,
            parentPassesCondition: passesCondition,
            path,
            preferences,
            skipConditionChecks,
            skipValidation,
            state,
            t,
            user
        });
    } else if (field.type === 'tabs') {
        const promises = field.tabs.map((tab)=>(0, _iterateFields.iterateFields)({
                id,
                anyParentLocalized: tab.localized || anyParentLocalized,
                config,
                data: (0, _types.tabHasName)(tab) ? data?.[tab.name] : data,
                fields: tab.fields,
                filter,
                forceFullValue,
                fullData,
                includeSchema,
                locale,
                omitParents,
                operation,
                parentPassesCondition: passesCondition,
                path: (0, _types.tabHasName)(tab) ? `${path}${tab.name}.` : path,
                preferences,
                skipConditionChecks,
                skipValidation,
                state,
                t,
                user
            }));
        await Promise.all(promises);
    }
};

//# sourceMappingURL=data:application/json;base64,