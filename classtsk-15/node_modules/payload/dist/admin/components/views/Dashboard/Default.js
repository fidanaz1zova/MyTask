"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _getTranslation = require("../../../../utilities/getTranslation");
const _groupNavItems = require("../../../utilities/groupNavItems");
const _Button = /*#__PURE__*/ _interop_require_default(require("../../elements/Button"));
const _Card = /*#__PURE__*/ _interop_require_default(require("../../elements/Card"));
const _Gutter = require("../../elements/Gutter");
const _Config = require("../../utilities/Config");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'dashboard';
const Dashboard = (props)=>{
    const { collections, globals, permissions, user } = props;
    const { push } = (0, _reactrouterdom.useHistory)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const { admin: { components: { afterDashboard, beforeDashboard } }, routes: { admin } } = (0, _Config.useConfig)();
    const [groups, setGroups] = (0, _react.useState)([]);
    (0, _react.useEffect)(()=>{
        setGroups((0, _groupNavItems.groupNavItems)([
            ...collections.filter(({ admin: { hidden } })=>!(typeof hidden === 'function' ? hidden({
                    user
                }) : hidden)).map((collection)=>{
                const entityToGroup = {
                    entity: collection,
                    type: _groupNavItems.EntityType.collection
                };
                return entityToGroup;
            }),
            ...globals.filter(({ admin: { hidden } })=>!(typeof hidden === 'function' ? hidden({
                    user
                }) : hidden)).map((global)=>{
                const entityToGroup = {
                    entity: global,
                    type: _groupNavItems.EntityType.global
                };
                return entityToGroup;
            })
        ], permissions, i18n));
    }, [
        collections,
        globals,
        i18n,
        permissions,
        user
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement(_Gutter.Gutter, {
        className: `${baseClass}__wrap`
    }, Array.isArray(beforeDashboard) && beforeDashboard.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i
        })), groups.map(({ entities, label }, groupIndex)=>{
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__group`,
            key: groupIndex
        }, /*#__PURE__*/ _react.default.createElement("h2", {
            className: `${baseClass}__label`
        }, label), /*#__PURE__*/ _react.default.createElement("ul", {
            className: `${baseClass}__card-list`
        }, entities.map(({ entity, type }, entityIndex)=>{
            let title;
            let buttonAriaLabel;
            let createHREF;
            let onClick;
            let hasCreatePermission;
            if (type === _groupNavItems.EntityType.collection) {
                title = (0, _getTranslation.getTranslation)(entity.labels.plural, i18n);
                buttonAriaLabel = t('showAllLabel', {
                    label: title
                });
                onClick = ()=>push({
                        pathname: `${admin}/collections/${entity.slug}`
                    });
                createHREF = `${admin}/collections/${entity.slug}/create`;
                hasCreatePermission = permissions?.collections?.[entity.slug]?.create?.permission;
            }
            if (type === _groupNavItems.EntityType.global) {
                title = (0, _getTranslation.getTranslation)(entity.label, i18n);
                buttonAriaLabel = t('editLabel', {
                    label: (0, _getTranslation.getTranslation)(entity.label, i18n)
                });
                onClick = ()=>push({
                        pathname: `${admin}/globals/${entity.slug}`
                    });
            }
            return /*#__PURE__*/ _react.default.createElement("li", {
                key: entityIndex
            }, /*#__PURE__*/ _react.default.createElement(_Card.default, {
                actions: hasCreatePermission && type === _groupNavItems.EntityType.collection ? /*#__PURE__*/ _react.default.createElement(_Button.default, {
                    "aria-label": t('createNewLabel', {
                        label: (0, _getTranslation.getTranslation)(entity.labels.singular, i18n)
                    }),
                    buttonStyle: "icon-label",
                    el: "link",
                    icon: "plus",
                    iconStyle: "with-border",
                    round: true,
                    to: createHREF
                }) : undefined,
                buttonAriaLabel: buttonAriaLabel,
                id: `card-${entity.slug}`,
                onClick: onClick,
                title: title,
                titleAs: "h3"
            }));
        })));
    }), Array.isArray(afterDashboard) && afterDashboard.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i
        }))));
};
const _default = Dashboard;

//# sourceMappingURL=data:application/json;base64,