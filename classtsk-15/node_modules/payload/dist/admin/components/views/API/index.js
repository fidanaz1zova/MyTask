"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "API", {
    enumerable: true,
    get: function() {
        return API;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _ = require("../..");
const _api = require("../../../api");
const _CopyToClipboard = /*#__PURE__*/ _interop_require_default(require("../../elements/CopyToClipboard"));
const _Gutter = require("../../elements/Gutter");
const _Input = require("../../forms/field-types/Checkbox/Input");
const _Input1 = /*#__PURE__*/ _interop_require_default(require("../../forms/field-types/Select/Input"));
const _MinimizeMaximize = require("../../icons/MinimizeMaximize");
const _ActionsProvider = require("../../utilities/ActionsProvider");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _SetStepNav = require("../collections/Edit/SetStepNav");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const chars = {
    leftCurlyBracket: '\u007B',
    leftSquareBracket: '\u005B',
    rightCurlyBracket: '\u007D',
    rightSquareBracket: '\u005D'
};
const baseClass = 'query-inspector';
const Bracket = ({ comma = false, position, type })=>{
    const rightBracket = type === 'object' ? chars.rightCurlyBracket : chars.rightSquareBracket;
    const leftBracket = type === 'object' ? chars.leftCurlyBracket : chars.leftSquareBracket;
    const bracketToRender = position === 'end' ? rightBracket : leftBracket;
    return /*#__PURE__*/ _react.createElement("span", {
        className: `${baseClass}__bracket ${baseClass}__bracket--position-${position}`
    }, bracketToRender, position === 'end' && comma ? ',' : null);
};
const RecursivelyRenderObjectData = ({ isEmpty = false, object, objectKey, parentType = 'object', trailingComma = false })=>{
    const objectKeys = Object.keys(object);
    const objectLength = objectKeys.length;
    const [isOpen, setIsOpen] = _react.useState(true);
    return /*#__PURE__*/ _react.createElement("li", null, /*#__PURE__*/ _react.createElement("button", {
        "aria-label": "toggle",
        className: `${baseClass}__list-toggle ${isEmpty ? `${baseClass}__list-toggle--empty` : ''}`,
        onClick: ()=>setIsOpen(!isOpen),
        type: "button"
    }, isEmpty ? null : /*#__PURE__*/ _react.createElement(_.Chevron, {
        className: `${baseClass}__toggle-row-icon ${baseClass}__toggle-row-icon--${isOpen ? 'open' : 'closed'}`
    }), /*#__PURE__*/ _react.createElement("span", null, objectKey && `"${objectKey}": `, /*#__PURE__*/ _react.createElement(Bracket, {
        position: "start",
        type: parentType
    }), isEmpty ? /*#__PURE__*/ _react.createElement(Bracket, {
        comma: trailingComma,
        position: "end",
        type: parentType
    }) : null)), /*#__PURE__*/ _react.createElement("ul", {
        className: `${baseClass}__json-children`
    }, isOpen && objectKeys.map((key, keyIndex)=>{
        let value = object[key];
        let type = 'string';
        const isLastKey = keyIndex === objectLength - 1;
        if (value === null) {
            type = 'null';
        } else if (value instanceof Date) {
            type = 'date';
            value = value.toISOString();
        } else if (Array.isArray(value)) {
            type = 'array';
        } else if (typeof value === 'object') {
            type = 'object';
        } else if (typeof value === 'number') {
            type = 'number';
        } else if (typeof value === 'boolean') {
            type = 'boolean';
        } else {
            type = 'string';
        }
        if (type === 'object' || type === 'array') {
            return /*#__PURE__*/ _react.createElement(RecursivelyRenderObjectData, {
                isEmpty: value.length === 0 || Object.keys(value).length === 0,
                key: `${key}-${keyIndex}`,
                object: value,
                objectKey: parentType === 'object' ? key : undefined,
                parentType: type,
                trailingComma: !isLastKey
            });
        }
        if (type === 'date' || type === 'string' || type === 'null' || type === 'number' || type === 'boolean') {
            const parentHasKey = Boolean(parentType === 'object' && key);
            const rowClasses = [
                `${baseClass}__row-line`,
                `${baseClass}__value-type--${type}`,
                `${baseClass}__row-line--${objectKey ? 'nested' : 'top'}`
            ].filter(Boolean).join(' ');
            return /*#__PURE__*/ _react.createElement("li", {
                className: rowClasses,
                key: `${key}-${keyIndex}`
            }, parentHasKey ? /*#__PURE__*/ _react.createElement("span", null, `"${key}": `) : null, /*#__PURE__*/ _react.createElement("span", {
                className: `${baseClass}__value`
            }, JSON.stringify(value)), isLastKey ? '' : ',');
        }
    })), !isEmpty && /*#__PURE__*/ _react.createElement("span", null, /*#__PURE__*/ _react.createElement(Bracket, {
        comma: trailingComma,
        position: "end",
        type: parentType
    })));
};
function createURL(url) {
    if (url.startsWith('/')) {
        const domain = window.location.origin;
        return new URL(url, domain);
    } else {
        return new URL(url);
    }
}
const API = (props)=>{
    const { apiURL } = props;
    const { i18n } = (0, _reacti18next.useTranslation)();
    const { localization, routes: { api }, serverURL } = (0, _Config.useConfig)();
    const { id, collection, global } = (0, _DocumentInfo.useDocumentInfo)();
    const { code } = (0, _Locale.useLocale)();
    const url = createURL(apiURL);
    const { setViewActions } = (0, _ActionsProvider.useActions)();
    const draftsEnabled = collection?.versions?.drafts || global?.versions?.drafts;
    const docEndpoint = global ? `/globals/${global.slug}` : `/${collection.slug}/${id}`;
    const [data, setData] = _react.useState({});
    const [draft, setDraft] = _react.useState(url.searchParams.get('draft') === 'true');
    const [locale, setLocale] = _react.useState(url.searchParams.get('locale') || code);
    const [depth, setDepth] = _react.useState(url.searchParams.get('depth') || '1');
    const [authenticated, setAuthenticated] = _react.useState(true);
    const [fullscreen, setFullscreen] = _react.useState(false);
    const fetchURL = `${serverURL}${api}${docEndpoint}?locale=${locale}&draft=${draft}&depth=${depth}`;
    _react.useEffect(()=>{
        const fetchData = async ()=>{
            const request = await _api.requests.get(fetchURL, {
                credentials: authenticated ? 'include' : 'omit',
                headers: {
                    'Accept-Language': i18n.language
                }
            });
            const json = await request.json();
            setData(json);
        };
        fetchData();
    }, [
        i18n.language,
        fetchURL,
        authenticated
    ]);
    _react.useEffect(()=>{
        const editConfig = (collection || global)?.admin?.components?.views?.Edit;
        const apiActions = editConfig && 'API' in editConfig && 'actions' in editConfig.API ? editConfig.API.actions : [];
        setViewActions(apiActions);
        return ()=>{
            setViewActions([]);
        };
    }, [
        collection,
        global,
        setViewActions
    ]);
    const localeOptions = localization && localization.locales.map((locale)=>({
            label: locale.label,
            value: locale.code
        }));
    const classes = [
        baseClass,
        fullscreen && `${baseClass}--fullscreen`
    ].filter(Boolean).join(' ');
    let isEditing;
    if ('collection' in props) {
        isEditing = props?.isEditing;
    }
    return /*#__PURE__*/ _react.createElement(_Gutter.Gutter, {
        className: classes,
        right: false
    }, /*#__PURE__*/ _react.createElement(_SetStepNav.SetStepNav, {
        collection: collection,
        global: global,
        id: id,
        isEditing: isEditing,
        view: "API"
    }), /*#__PURE__*/ _react.createElement("div", {
        className: `${baseClass}__configuration`
    }, /*#__PURE__*/ _react.createElement("div", {
        className: `${baseClass}__api-url`
    }, /*#__PURE__*/ _react.createElement("span", {
        className: `${baseClass}__label`
    }, "API URL ", /*#__PURE__*/ _react.createElement(_CopyToClipboard.default, {
        value: fetchURL
    })), /*#__PURE__*/ _react.createElement("a", {
        href: fetchURL,
        rel: "noopener noreferrer",
        target: "_blank"
    }, fetchURL)), /*#__PURE__*/ _react.createElement("div", {
        className: `${baseClass}__form-fields`
    }, /*#__PURE__*/ _react.createElement("div", {
        className: `${baseClass}__filter-query-checkboxes`
    }, draftsEnabled && /*#__PURE__*/ _react.createElement(_Input.CheckboxInput, {
        checked: draft,
        id: "draft-checkbox",
        label: "Draft",
        onToggle: ()=>setDraft(!draft)
    }), /*#__PURE__*/ _react.createElement(_Input.CheckboxInput, {
        checked: authenticated,
        id: "auth-checkbox",
        label: "Authenticated",
        onToggle: ()=>setAuthenticated(!authenticated)
    })), localeOptions && /*#__PURE__*/ _react.createElement(_Input1.default, {
        defaultValue: {
            label: locale,
            value: locale
        },
        label: "Locale",
        name: "locale",
        onChange: (e)=>setLocale(e.value),
        options: localeOptions,
        path: "locale"
    }), /*#__PURE__*/ _react.createElement(_Input1.default, {
        defaultValue: {
            label: depth,
            value: depth
        },
        label: "Depth",
        name: "depth",
        onChange: (e)=>setDepth(e.value),
        options: [
            {
                label: '0',
                value: '0'
            },
            {
                label: '1',
                value: '1'
            },
            {
                label: '2',
                value: '2'
            },
            {
                label: '3',
                value: '3'
            },
            {
                label: '4',
                value: '4'
            }
        ],
        path: "depth"
    }))), /*#__PURE__*/ _react.createElement("div", {
        className: `${baseClass}__results-wrapper`
    }, /*#__PURE__*/ _react.createElement("div", {
        className: `${baseClass}__toggle-fullscreen-button-container`
    }, /*#__PURE__*/ _react.createElement("button", {
        "aria-label": "toggle fullscreen",
        className: `${baseClass}__toggle-fullscreen-button`,
        onClick: ()=>setFullscreen(!fullscreen),
        type: "button"
    }, /*#__PURE__*/ _react.createElement(_MinimizeMaximize.MinimizeMaximize, {
        isMinimized: !fullscreen
    }))), /*#__PURE__*/ _react.createElement("div", {
        className: `${baseClass}__results`
    }, /*#__PURE__*/ _react.createElement(RecursivelyRenderObjectData, {
        object: data
    }))));
};

//# sourceMappingURL=data:application/json;base64,