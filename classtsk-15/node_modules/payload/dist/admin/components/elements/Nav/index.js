"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Nav", {
    enumerable: true,
    get: function() {
        return Nav;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _getTranslation = require("../../../../utilities/getTranslation");
const _groupNavItems = require("../../../utilities/groupNavItems");
const _Chevron = /*#__PURE__*/ _interop_require_default(require("../../icons/Chevron"));
const _Auth = require("../../utilities/Auth");
const _Config = require("../../utilities/Config");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../utilities/RenderCustomComponent"));
const _Hamburger = require("../Hamburger");
const _Logout = /*#__PURE__*/ _interop_require_default(require("../Logout"));
const _NavGroup = /*#__PURE__*/ _interop_require_default(require("../NavGroup"));
const _context = require("./context");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'nav';
const DefaultNav = ()=>{
    const { navOpen, navRef, setNavOpen } = (0, _context.useNav)();
    const { permissions, user } = (0, _Auth.useAuth)();
    const [groups, setGroups] = (0, _react.useState)([]);
    const { i18n } = (0, _reacti18next.useTranslation)('general');
    const { admin: { components: { afterNavLinks, beforeNavLinks } }, collections, globals, routes: { admin } } = (0, _Config.useConfig)();
    (0, _react.useEffect)(()=>{
        setGroups((0, _groupNavItems.groupNavItems)([
            ...collections.filter(({ admin: { hidden } })=>!(typeof hidden === 'function' ? hidden({
                    user
                }) : hidden)).map((collection)=>{
                const entityToGroup = {
                    entity: collection,
                    type: _groupNavItems.EntityType.collection
                };
                return entityToGroup;
            }),
            ...globals.filter(({ admin: { hidden } })=>!(typeof hidden === 'function' ? hidden({
                    user
                }) : hidden)).map((global)=>{
                const entityToGroup = {
                    entity: global,
                    type: _groupNavItems.EntityType.global
                };
                return entityToGroup;
            })
        ], permissions, i18n));
    }, [
        collections,
        globals,
        permissions,
        i18n,
        i18n.language,
        user
    ]);
    return /*#__PURE__*/ _react.default.createElement("aside", {
        className: [
            baseClass,
            navOpen && `${baseClass}--nav-open`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__scroll`,
        ref: navRef
    }, /*#__PURE__*/ _react.default.createElement("nav", {
        className: `${baseClass}__wrap`
    }, Array.isArray(beforeNavLinks) && beforeNavLinks.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i
        })), groups.map(({ entities, label }, key)=>{
        return /*#__PURE__*/ _react.default.createElement(_NavGroup.default, {
            key,
            label
        }, entities.map(({ entity, type }, i)=>{
            let entityLabel;
            let href;
            let id;
            if (type === _groupNavItems.EntityType.collection) {
                href = `${admin}/collections/${entity.slug}`;
                entityLabel = (0, _getTranslation.getTranslation)(entity.labels.plural, i18n);
                id = `nav-${entity.slug}`;
            }
            if (type === _groupNavItems.EntityType.global) {
                href = `${admin}/globals/${entity.slug}`;
                entityLabel = (0, _getTranslation.getTranslation)(entity.label, i18n);
                id = `nav-global-${entity.slug}`;
            }
            return /*#__PURE__*/ _react.default.createElement(_reactrouterdom.NavLink, {
                activeClassName: "active",
                className: `${baseClass}__link`,
                id: id,
                key: i,
                tabIndex: !navOpen ? -1 : undefined,
                to: href
            }, /*#__PURE__*/ _react.default.createElement("span", {
                className: `${baseClass}__link-icon`
            }, /*#__PURE__*/ _react.default.createElement(_Chevron.default, {
                direction: "right"
            })), /*#__PURE__*/ _react.default.createElement("span", {
                className: `${baseClass}__link-label`
            }, entityLabel));
        }));
    }), Array.isArray(afterNavLinks) && afterNavLinks.map((Component, i)=>/*#__PURE__*/ _react.default.createElement(Component, {
            key: i
        })), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__controls`
    }, /*#__PURE__*/ _react.default.createElement(_Logout.default, {
        tabIndex: !navOpen ? -1 : undefined
    })))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__header`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__header-content`
    }, /*#__PURE__*/ _react.default.createElement("button", {
        className: `${baseClass}__mobile-close`,
        onClick: ()=>{
            setNavOpen(false);
        },
        tabIndex: !navOpen ? -1 : undefined,
        type: "button"
    }, /*#__PURE__*/ _react.default.createElement(_Hamburger.Hamburger, {
        isActive: true
    })))));
};
const Nav = ()=>{
    const { admin: { components: { Nav: CustomNav } = {
        Nav: undefined
    } } = {} } = (0, _Config.useConfig)();
    return /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: CustomNav,
        DefaultComponent: DefaultNav
    });
};

//# sourceMappingURL=data:application/json;base64,