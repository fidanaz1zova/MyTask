"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _reacttoastify = require("react-toastify");
const _useDebounce = /*#__PURE__*/ _interop_require_default(require("../../../hooks/useDebounce"));
const _formatDate = require("../../../utilities/formatDate");
const _context = require("../../forms/Form/context");
const _reduceFieldsToValues = /*#__PURE__*/ _interop_require_default(require("../../forms/Form/reduceFieldsToValues"));
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'autosave';
const Autosave = ({ id, collection, global, publishedDocUpdatedAt })=>{
    const { routes: { admin, api }, serverURL } = (0, _Config.useConfig)();
    const { getVersions, versions } = (0, _DocumentInfo.useDocumentInfo)();
    const [fields] = (0, _context.useAllFormFields)();
    const modified = (0, _context.useFormModified)();
    const { code: locale } = (0, _Locale.useLocale)();
    const { replace } = (0, _reactrouterdom.useHistory)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('version');
    let interval = 800;
    if (collection?.versions.drafts && collection.versions?.drafts?.autosave) interval = collection.versions.drafts.autosave.interval;
    if (global?.versions.drafts && global.versions?.drafts?.autosave) interval = global.versions.drafts.autosave.interval;
    const [saving, setSaving] = (0, _react.useState)(false);
    const [lastSaved, setLastSaved] = (0, _react.useState)();
    const debouncedFields = (0, _useDebounce.default)(fields, interval);
    const fieldRef = (0, _react.useRef)(fields);
    const modifiedRef = (0, _react.useRef)(modified);
    const localeRef = (0, _react.useRef)(locale);
    // Store fields in ref so the autosave func
    // can always retrieve the most to date copies
    // after the timeout has executed
    fieldRef.current = fields;
    // Store modified in ref so the autosave func
    // can bail out if modified becomes false while
    // timing out during autosave
    modifiedRef.current = modified;
    const createCollectionDoc = (0, _react.useCallback)(async ()=>{
        const res = await fetch(`${serverURL}${api}/${collection.slug}?locale=${locale}&fallback-locale=null&depth=0&draft=true&autosave=true`, {
            body: JSON.stringify({}),
            credentials: 'include',
            headers: {
                'Accept-Language': i18n.language,
                'Content-Type': 'application/json'
            },
            method: 'POST'
        });
        if (res.status === 201) {
            const json = await res.json();
            replace(`${admin}/collections/${collection.slug}/${json.doc.id}`, {
                state: {
                    data: json.doc
                }
            });
        } else {
            _reacttoastify.toast.error(t('error:autosaving'));
        }
    }, [
        i18n,
        serverURL,
        api,
        collection,
        locale,
        replace,
        admin,
        t
    ]);
    (0, _react.useEffect)(()=>{
        // If no ID, but this is used for a collection doc,
        // Immediately save it and set lastSaved
        if (!id && collection) {
            createCollectionDoc();
        }
    }, [
        id,
        collection,
        createCollectionDoc
    ]);
    // When debounced fields change, autosave
    (0, _react.useEffect)(()=>{
        const autosave = async ()=>{
            if (modified) {
                setSaving(true);
                let url;
                let method;
                if (collection && id) {
                    url = `${serverURL}${api}/${collection.slug}/${id}?draft=true&autosave=true&locale=${localeRef.current}`;
                    method = 'PATCH';
                }
                if (global) {
                    url = `${serverURL}${api}/globals/${global.slug}?draft=true&autosave=true&locale=${localeRef.current}`;
                    method = 'POST';
                }
                if (url) {
                    setTimeout(async ()=>{
                        if (modifiedRef.current) {
                            const body = {
                                ...(0, _reduceFieldsToValues.default)(fieldRef.current, true),
                                _status: 'draft'
                            };
                            const res = await fetch(url, {
                                body: JSON.stringify(body),
                                credentials: 'include',
                                headers: {
                                    'Accept-Language': i18n.language,
                                    'Content-Type': 'application/json'
                                },
                                method
                            });
                            if (res.status === 200) {
                                setLastSaved(new Date().getTime());
                                getVersions();
                            }
                        }
                        setSaving(false);
                    }, 1000);
                }
            }
        };
        autosave();
    }, [
        i18n,
        debouncedFields,
        modified,
        serverURL,
        api,
        collection,
        global,
        id,
        getVersions,
        localeRef,
        modifiedRef
    ]);
    (0, _react.useEffect)(()=>{
        if (versions?.docs?.[0]) {
            setLastSaved(new Date(versions.docs[0].updatedAt).getTime());
        } else if (publishedDocUpdatedAt) {
            setLastSaved(new Date(publishedDocUpdatedAt).getTime());
        }
    }, [
        publishedDocUpdatedAt,
        versions
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, saving && t('saving'), !saving && lastSaved && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, t('lastSavedAgo', {
        distance: (0, _formatDate.formatTimeToNow)(lastSaved, i18n.language)
    })));
};
const _default = Autosave;

//# sourceMappingURL=data:application/json;base64,