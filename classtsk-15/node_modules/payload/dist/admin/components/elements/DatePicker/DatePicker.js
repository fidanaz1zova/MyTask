"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _locale = /*#__PURE__*/ _interop_require_wildcard(require("date-fns/locale"));
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reactdatepicker = /*#__PURE__*/ _interop_require_wildcard(require("react-datepicker"));
require("react-datepicker/dist/react-datepicker.css");
const _reacti18next = require("react-i18next");
const _getSupportedDateLocale = require("../../../utilities/formatDate/getSupportedDateLocale");
const _Calendar = /*#__PURE__*/ _interop_require_default(require("../../icons/Calendar"));
const _X = /*#__PURE__*/ _interop_require_default(require("../../icons/X"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'date-time-picker';
const DateTime = (props)=>{
    const { displayFormat: customDisplayFormat, maxDate, maxTime, minDate, minTime, monthsToShow = 1, onChange: onChangeFromProps, overrides, pickerAppearance = 'default', placeholder: placeholderText, readOnly, timeFormat = 'h:mm aa', timeIntervals = 30, value } = props;
    // Use the user's AdminUI language preference for the locale
    const { i18n } = (0, _reacti18next.useTranslation)();
    const locale = (0, _getSupportedDateLocale.getSupportedDateLocale)(i18n.language);
    try {
        (0, _reactdatepicker.registerLocale)(locale, _locale[locale]);
    } catch (e) {
        console.warn(`Could not find DatePicker locale for ${locale}`);
    }
    let dateFormat = customDisplayFormat;
    if (!customDisplayFormat) {
        // when no displayFormat is provided, determine format based on the picker appearance
        if (pickerAppearance === 'default') dateFormat = 'MM/dd/yyyy';
        else if (pickerAppearance === 'dayAndTime') dateFormat = 'MMM d, yyy h:mm a';
        else if (pickerAppearance === 'timeOnly') dateFormat = 'h:mm a';
        else if (pickerAppearance === 'dayOnly') dateFormat = 'MMM dd';
        else if (pickerAppearance === 'monthOnly') dateFormat = 'MMMM';
    }
    const onChange = (incomingDate)=>{
        const newDate = incomingDate;
        if (newDate instanceof Date && [
            'dayOnly',
            'default',
            'monthOnly'
        ].includes(pickerAppearance)) {
            const tzOffset = incomingDate.getTimezoneOffset() / 60;
            newDate.setHours(12 - tzOffset, 0);
        }
        if (typeof onChangeFromProps === 'function') onChangeFromProps(newDate);
    };
    const dateTimePickerProps = {
        customInputRef: 'ref',
        dateFormat,
        disabled: readOnly,
        maxDate,
        maxTime,
        minDate,
        minTime,
        monthsShown: Math.min(2, monthsToShow),
        onChange,
        placeholderText,
        selected: value && new Date(value),
        showMonthYearPicker: pickerAppearance === 'monthOnly',
        showPopperArrow: false,
        showTimeSelect: pickerAppearance === 'dayAndTime' || pickerAppearance === 'timeOnly',
        timeFormat,
        timeIntervals,
        ...overrides
    };
    const classes = [
        baseClass,
        `${baseClass}__appearance--${pickerAppearance}`
    ].filter(Boolean).join(' ');
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: classes
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__icon-wrap`
    }, dateTimePickerProps.selected && /*#__PURE__*/ _react.default.createElement("button", {
        className: `${baseClass}__clear-button`,
        onClick: ()=>onChange(null),
        type: "button"
    }, /*#__PURE__*/ _react.default.createElement(_X.default, null)), /*#__PURE__*/ _react.default.createElement(_Calendar.default, null)), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__input-wrapper`
    }, /*#__PURE__*/ _react.default.createElement(_reactdatepicker.default, {
        ...dateTimePickerProps,
        dropdownMode: "select",
        locale: locale,
        popperModifiers: [
            {
                name: 'preventOverflow',
                enabled: true
            }
        ],
        showMonthDropdown: true,
        showYearDropdown: true
    })));
};
const _default = DateTime;

//# sourceMappingURL=data:application/json;base64,