"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _crypto = /*#__PURE__*/ _interop_require_default(require("crypto"));
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _util = require("util");
const _executeAccess = /*#__PURE__*/ _interop_require_default(require("../../auth/executeAccess"));
const _sendVerificationEmail = /*#__PURE__*/ _interop_require_default(require("../../auth/sendVerificationEmail"));
const _register = require("../../auth/strategies/local/register");
const _afterChange = require("../../fields/hooks/afterChange");
const _afterRead = require("../../fields/hooks/afterRead");
const _beforeChange = require("../../fields/hooks/beforeChange");
const _beforeValidate = require("../../fields/hooks/beforeValidate");
const _generateFileData = require("../../uploads/generateFileData");
const _unlinkTempFiles = require("../../uploads/unlinkTempFiles");
const _uploadFiles = require("../../uploads/uploadFiles");
const _commitTransaction = require("../../utilities/commitTransaction");
const _flattenTopLevelFields = /*#__PURE__*/ _interop_require_default(require("../../utilities/flattenTopLevelFields"));
const _initTransaction = require("../../utilities/initTransaction");
const _killTransaction = require("../../utilities/killTransaction");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("../../utilities/sanitizeInternalFields"));
const _saveVersion = require("../../versions/saveVersion");
const _utils = require("./utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const unlinkFile = (0, _util.promisify)(_fs.default.unlink);
async function create(incomingArgs) {
    let args = incomingArgs;
    try {
        const shouldCommit = await (0, _initTransaction.initTransaction)(args.req);
        // /////////////////////////////////////
        // beforeOperation - Collection
        // /////////////////////////////////////
        await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook)=>{
            await priorHook;
            args = await hook({
                args,
                collection: args.collection.config,
                context: args.req.context,
                operation: 'create',
                req: args.req
            }) || args;
        }, Promise.resolve());
        const { autosave = false, collection: { config: collectionConfig }, collection, depth, disableVerificationEmail, draft = false, overrideAccess, overwriteExistingFiles = false, req: { fallbackLocale, locale, payload, payload: { config, emailOptions } }, req, showHiddenFields } = args;
        let { data } = args;
        const shouldSaveDraft = Boolean(draft && collectionConfig.versions.drafts);
        // /////////////////////////////////////
        // Access
        // /////////////////////////////////////
        if (!overrideAccess) {
            await (0, _executeAccess.default)({
                data,
                req
            }, collectionConfig.access.create);
        }
        // /////////////////////////////////////
        // Custom id
        // /////////////////////////////////////
        // @todo: Refactor code to store 'customId' on the collection configuration itself so we don't need to repeat flattenFields
        const hasIdField = (0, _flattenTopLevelFields.default)(collectionConfig.fields).findIndex((field)=>field.name === 'id') > -1;
        if (hasIdField) {
            data = {
                _id: data.id,
                ...data
            };
        }
        // /////////////////////////////////////
        // Generate data for all files and sizes
        // /////////////////////////////////////
        const { data: newFileData, files: filesToUpload } = await (0, _generateFileData.generateFileData)({
            collection,
            config,
            data,
            overwriteExistingFiles,
            req,
            throwOnMissingFile: !shouldSaveDraft && collection.config.upload.filesRequiredOnCreate !== false
        });
        data = newFileData;
        // /////////////////////////////////////
        // beforeValidate - Fields
        // /////////////////////////////////////
        data = await (0, _beforeValidate.beforeValidate)({
            collection: collectionConfig,
            context: req.context,
            data,
            doc: {},
            global: null,
            operation: 'create',
            overrideAccess,
            req
        });
        // /////////////////////////////////////
        // beforeValidate - Collections
        // /////////////////////////////////////
        await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook)=>{
            await priorHook;
            data = await hook({
                collection: collectionConfig,
                context: req.context,
                data,
                operation: 'create',
                req
            }) || data;
        }, Promise.resolve());
        // /////////////////////////////////////
        // beforeChange - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook)=>{
            await priorHook;
            data = await hook({
                collection: collectionConfig,
                context: req.context,
                data,
                operation: 'create',
                req
            }) || data;
        }, Promise.resolve());
        // /////////////////////////////////////
        // beforeChange - Fields
        // /////////////////////////////////////
        const resultWithLocales = await (0, _beforeChange.beforeChange)({
            collection: collectionConfig,
            context: req.context,
            data,
            doc: {},
            docWithLocales: {},
            global: null,
            operation: 'create',
            req,
            skipValidation: shouldSaveDraft
        });
        // /////////////////////////////////////
        // Write files to local storage
        // /////////////////////////////////////
        if (!collectionConfig.upload.disableLocalStorage) {
            await (0, _uploadFiles.uploadFiles)(payload, filesToUpload, req.t);
        }
        // /////////////////////////////////////
        // Create
        // /////////////////////////////////////
        let doc;
        if (collectionConfig.auth && !collectionConfig.auth.disableLocalStrategy) {
            if (data.email) {
                resultWithLocales.email = data.email.toLowerCase();
            }
            if (collectionConfig.auth.verify) {
                resultWithLocales._verified = Boolean(resultWithLocales._verified) || false;
                resultWithLocales._verificationToken = _crypto.default.randomBytes(20).toString('hex');
            }
            doc = await (0, _register.registerLocalStrategy)({
                collection: collectionConfig,
                doc: resultWithLocales,
                password: data.password,
                payload: req.payload,
                req
            });
        } else {
            doc = await payload.db.create({
                collection: collectionConfig.slug,
                data: resultWithLocales,
                req
            });
        }
        const verificationToken = doc._verificationToken;
        let result = (0, _sanitizeInternalFields.default)(doc);
        // /////////////////////////////////////
        // Create version
        // /////////////////////////////////////
        if (collectionConfig.versions) {
            await (0, _saveVersion.saveVersion)({
                id: result.id,
                autosave,
                collection: collectionConfig,
                docWithLocales: result,
                payload,
                req
            });
        }
        // /////////////////////////////////////
        // Send verification email if applicable
        // /////////////////////////////////////
        if (collectionConfig.auth && collectionConfig.auth.verify) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            (0, _sendVerificationEmail.default)({
                collection: {
                    config: collectionConfig
                },
                config: payload.config,
                disableEmail: disableVerificationEmail,
                emailOptions,
                req,
                sendEmail: payload.sendEmail,
                token: verificationToken,
                user: result
            });
        }
        // /////////////////////////////////////
        // afterRead - Fields
        // /////////////////////////////////////
        result = await (0, _afterRead.afterRead)({
            collection: collectionConfig,
            context: req.context,
            depth,
            doc: result,
            fallbackLocale,
            global: null,
            locale,
            overrideAccess,
            req,
            showHiddenFields
        });
        // /////////////////////////////////////
        // afterRead - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook)=>{
            await priorHook;
            result = await hook({
                collection: collectionConfig,
                context: req.context,
                doc: result,
                req
            }) || result;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterChange - Fields
        // /////////////////////////////////////
        result = await (0, _afterChange.afterChange)({
            collection: collectionConfig,
            context: req.context,
            data,
            doc: result,
            global: null,
            operation: 'create',
            previousDoc: {},
            req
        });
        // /////////////////////////////////////
        // afterChange - Collection
        // /////////////////////////////////////
        await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook)=>{
            await priorHook;
            result = await hook({
                collection: collectionConfig,
                context: req.context,
                doc: result,
                operation: 'create',
                previousDoc: {},
                req: args.req
            }) || result;
        }, Promise.resolve());
        // /////////////////////////////////////
        // afterOperation - Collection
        // /////////////////////////////////////
        result = await (0, _utils.buildAfterOperation)({
            args,
            collection: collectionConfig,
            operation: 'create',
            result
        });
        await (0, _unlinkTempFiles.unlinkTempFiles)({
            collectionConfig,
            config,
            req
        });
        // /////////////////////////////////////
        // Return results
        // /////////////////////////////////////
        if (shouldCommit) await (0, _commitTransaction.commitTransaction)(req);
        return result;
    } catch (error) {
        await (0, _killTransaction.killTransaction)(args.req);
        throw error;
    }
}
const _default = create;

//# sourceMappingURL=data:application/json;base64,